import json
import tkinter as tk
from tkinter import scrolledtext
from tkinter import messagebox
import json  # For parsing JSON data
from tkinter import ttk
from fake_course_generator import generate_fake_course

class AugmentedRealityApp:
    def __init__(self, master):
        self.master = master
        master.title("AR Learning Content Generator")
        # Make the initial window fullscreen
        master.state('zoomed')  # For Windows, to maximize the window
        # master.attributes('-fullscreen', True)  # For Linux or Mac, to make it truly fullscreen

        # Configure the grid to expand and fill the space
        master.grid_columnconfigure(0, weight=1)
        for i in range(8):  # Assuming you have 8 rows, adjust the range as needed
            master.grid_rowconfigure(i, weight=1)

        # Create widgets
        self.chat_text = scrolledtext.ScrolledText(master, width=60, height=10, wrap=tk.WORD)
        self.level_label = tk.Label(master, text="Enter your current level of knowledge:")
        self.knowledge_level = tk.Scale(master, from_=0, to=2, orient=tk.HORIZONTAL, showvalue=0, tickinterval=1, resolution=1, command=self.update_label)
        self.label_var = tk.StringVar()
        self.label_display = tk.Label(master, textvariable=self.label_var)
        self.generate_button = tk.Button(master, text="Generate Learning Content", command=self.generate_ar_content)
        self.ar_content_label = tk.Label(master, text="Learning Content:")
        self.ar_output = tk.Label(master, text="", wraplength=400, justify="left")
        self.link_to_ar_button = tk.Button(master, text="Link to AR", command=self.open_ar_link)

        # Layout widgets
        self.chat_text.grid(row=0, column=0, padx=10, pady=10, columnspan=2)
        self.level_label.grid(row=1, column=0, padx=10, pady=5, columnspan=2)
        self.knowledge_level.grid(row=2, column=0, padx=10, pady=5, columnspan=2)
        self.label_display.grid(row=3, column=0, columnspan=2)
        self.generate_button.grid(row=4, column=0, columnspan=2, pady=10)
        self.ar_content_label.grid(row=5, column=0, padx=10, pady=5)
        self.ar_output.grid(row=6, column=0, padx=10, pady=5, columnspan=2)
        self.link_to_ar_button.grid(row=7, column=0, columnspan=2, pady=10)

        # Initialize label display
        self.update_label(self.knowledge_level.get())

    def update_label(self, value):
        labels = ["New", "Moderate", "Strong"]
        self.label_var.set(f"Selected Level: {labels[int(value)]}")

    def generate_ar_content(self):
        # Get input from the chat prompt (assuming you have a function for this)
        chat_input = self.chat_text.get("1.0", tk.END).strip()

        # Get the selected knowledge level from the slider
        knowledge_level = self.knowledge_level.get()

        # Call your backend function to generate AR content based on the chat input and knowledge level
        ar_content = self.generate_ar_content_backend(chat_input, knowledge_level)

        # Now, display the course content window
        self.display_course_content()

        # Display the AR content on the same page
        self.ar_output.config(text=ar_content)
        

    def generate_ar_content_backend(self, chat_input, knowledge_level):
        fake_course_json = generate_fake_course()
    
    # Optionally convert the JSON string back to a Python dictionary
    # if you want to work with the data structure more easily
        fake_course_data = json.loads(fake_course_json)
    
    # Now you can use fake_course_data to populate your UI elements
    # For example, you might update a label with the course title
        self.ar_output.config(text=fake_course_data["course_title"])

        return f"AR Content: {chat_input} (Generated by AI) - Knowledge Level: {knowledge_level}"

    def open_ar_link(self):
        # Add functionality to open the AR link here
        messagebox.showinfo("Link to AR", "Opening AR link...")

    def display_course_content(self):
        # Create a Toplevel window or use a Frame in the main window
        self.course_window = tk.Toplevel(self.master)
        self.course_window.title("Course Content")

        # Display course title and description
        self.course_title_label = tk.Label(self.course_window, text="Course Title")
        self.course_title_label.pack()

        self.course_description_label = tk.Label(self.course_window, text="Course Description")
        self.course_description_label.pack()

        # Treeview for modules and lessons
        self.course_tree = ttk.Treeview(self.course_window)
        self.course_tree.pack()

        # Add modules and lessons to the tree
        for module in fake_course_data['modules']:
            module_id = self.course_tree.insert('', 'end', text=module['module_title'])
            for lesson in module['lessons']:
                self.course_tree.insert(module_id, 'end', text=lesson['lesson_title'])

        # Text area for displaying selected lesson content
        self.lesson_content_text = tk.Text(self.course_window, wrap='word')
        self.lesson_content_text.pack()

        # Bind selection event to a function that displays the lesson content
        self.course_tree.bind('<<TreeviewSelect>>', self.on_lesson_select)

    def on_lesson_select(self, event):
        # Get selected item
        selected_item = self.course_tree.selection()[0]
        lesson_title = self.course_tree.item(selected_item, 'text')

        # Find and display the content for the selected lesson (simplified for example)
        for module in fake_course_data['modules']:
            for lesson in module['lessons']:
                if lesson['lesson_title'] == lesson_title:
                    self.lesson_content_text.delete(1.0, tk.END)  # Clear previous content
                    self.lesson_content_text.insert(tk.END, lesson['lesson_content'])


        
def main():
    root = tk.Tk()
    app = AugmentedRealityApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
